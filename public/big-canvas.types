/* basic types */
type BigInteger = String in /^[+-]?[0-9]+$/
type Color = String in /^#[0-9a-fA-F]{6}$/

struct Point {
	x: BigInteger;
	y: BigInteger;
}

/* tiles*/
struct TileLocation {
	row: BigInteger;
	column: BigInteger;
}
type TileLocations = list of TileLocation

/* users */
type UserId = BigInteger

/* action */
enum ActionType {
  BRUSH,
  ERASER,
  UNDO,
  REDO
}

type StrokeWidth = Integer in 1..100
type StrokeOpacity = Float in 0.0..1.0
type Stroke = list of Point
type ActionId = BigInteger
type ActionIds = list of ActionId

struct Action {
  type: ActionType match {
    case BRUSH:
      color: Color;
      width: StrokeWidth;
      opacity: StrokeOpacity;
      stroke: Stroke;
    case ERASER:
      width: StrokeWidth;
      opacity: StrokeOpacity;
      stroke: Stroke;
    case UNDO:
      actionId: ActionId;
    case REDO:
      actionId: ActionId;
  };
}

struct StoredAction {
  action: Action;
  undone: Boolean;
  userId: UserId;
  region: TileLocations;
}

/* window */
type WindowWidth = Integer in 1..4096
type WindowHeight = Integer in 1..4096

/* images */
type ImageWidth = Integer in 1..4096
type ImageHeight = Integer in 1..4096
struct Image {
	position: Point;
	width: ImageWidth;
	height: ImageHeight;
}

/* interface */
interface Main {
  //function setWindow(position : Point, width: WindowWidth, height: WindowHeight);
  //function sendAction(action: Action): ActionId;
  event onAction(userId: UserId, actionId: ActionId, action: Action, region: TileLocations);
  //function getName(userId: UserId): String;
  function setName(name: String);
}