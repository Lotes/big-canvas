/* basic types */
type BigInteger = String in /^[-]?[0-9]+$/
type Color = String in /^#[0-9a-fA-F]{6}$/

struct Point {
	x: BigInteger;
	y: BigInteger;
}

/* editor */
enum EditorMode {
  MOVE,
  BRUSH,
  ERASER
}

/* tiles*/
struct TileLocation {
	row: BigInteger;
	column: BigInteger;
}
type TileLocations = list of TileLocation

/* users */
type UserId = BigInteger
struct UserData {
  name: String;
}

/* action */
enum ActionType {
  BRUSH,
  ERASER,
  UNDO,
  REDO
}

type StrokeWidth = Integer in 1..100
type StrokeOpacity = Float in 0.0..1.0
type Stroke = list of Point
type ActionId = BigInteger
type ActionIds = list of ActionId

struct Action {
  type: ActionType match {
    case BRUSH:
      color: Color;
      width: StrokeWidth;
      opacity: StrokeOpacity;
      stroke: Stroke;
    case ERASER:
      width: StrokeWidth;
      opacity: StrokeOpacity;
      stroke: Stroke;
    case UNDO:
      actionId: ActionId;
    case REDO:
      actionId: ActionId;
  };
}

struct ActionData: Action {
  userId: UserId;
  undone: Boolean;
  region: TileLocations;
  timestamp: BigInteger;
}

/* jobs */
enum JobType {
  DELTA,
  UPDATE
}

struct JobData {
  type: JobType match {
    case DELTA:
      actionId: ActionId;
    case UPDATE:
      location: TileLocation;
      outstandingActions: ActionIds;
  };
}

/* window */
type WindowWidth = Integer in 0..4096
type WindowHeight = Integer in 0..4096

/* update message */
struct TileUpdate {
  location: TileLocation;
  valid: Boolean match {
    case true:
      empty: Boolean;
      //if true, load the "empty" tile
      //if false, load /tiles/col_row.png
    case false:
      //load the "loading" tile
      operationsLeft: Integer;
  };
}
type TileUpdates = list of TileUpdate

/* images */
type ImageId = String in /^[a-zA-Z0-9]+$/
type ImageWidth = Integer in 1..4096
type ImageHeight = Integer in 1..4096


/* interface */
interface Main {
  //window update
  function setWindow(x: BigInteger, y: BigInteger, width: WindowWidth, height: WindowHeight);
  event onWindowUpdated(updates: TileUpdates);

  //sending and receiving actions
  function sendAction(action: Action): ActionId;
  event onAction(userId: UserId, actionId: ActionId, action: Action, region: TileLocations);

  //user names
  function getName(userId: UserId): String;
  function setName(name: String);

  //images
  function defineImage(x: BigInteger, y: BigInteger, width: ImageWidth, height: ImageHeight): ImageId;
}