/* basic types */
type BigInteger = String in /^[-]?[0-9]+$/
type Color = String in /^#[0-9a-fA-F]{6}$/

struct Point {
    x: BigInteger;
    y: BigInteger;
}

/* editor */
enum EditorMode {
  MOVE,
  BRUSH,
  ERASER
}

/* tiles*/
struct TileLocation {
    row: BigInteger;
    column: BigInteger;
}
type TileLocations = list of TileLocation

/* action */
enum ActionType {
  BRUSH,
  ERASER,
  UNDO,
  REDO
}
type UserId = BigInteger
type StrokeWidth = Integer in 1..100
type StrokeOpacity = Float in 0.0..1.0
type Stroke = list of Point
type ActionId = BigInteger
type ActionIds = list of ActionId

struct Action {
  type: ActionType match {
    case BRUSH:
      color: Color;
      width: StrokeWidth;
      opacity: StrokeOpacity;
      stroke: Stroke;
    case ERASER:
      width: StrokeWidth;
      opacity: StrokeOpacity;
      stroke: Stroke;
    case UNDO:
    case REDO:
  };
}

/* window */
type WindowWidth = Integer in 0..4096
type WindowHeight = Integer in 0..4096

/* images */
type ImageId = String in /^[a-zA-Z0-9]+$/
type ImageWidth = Integer in 1..4096
type ImageHeight = Integer in 1..4096

/* data */
struct UserInfo {
  name: String;
  numBrushStrokes: BigInteger;
  numEraserStrokes: BigInteger;
  numUndos: BigInteger;
  numRedos: BigInteger;
}

struct UserData: UserInfo { //used for database object
  firstActionId: ActionId;
  lastActionId: ActionId;
}

struct ActionData { //used for database object
  type: ActionType;
  actionObject: Action;
  userId: UserId;
  undone: Boolean;
  region: TileLocations;
  timestamp: Integer;
  previousActionId: ActionId;
  nextActionId: ActionId;
}

struct ActionInfo { //used for tile updates
  id: ActionId;
  actionObject: Action;
  userId: UserId;
  undone: Boolean;
  region: TileLocations;
}
type ActionInfos = list of ActionInfo

/* versions */
type RevisionId = BigInteger

struct Revision {
  revisionId: RevisionId;
  actionId: ActionId;
  available: Boolean;
}
type Revisions = list of Revision

/* updates */
enum UpdateType {
  RENDERED,
  HISTORY,
  ACTION
}

struct Update {
  type: UpdateType match {
    case ACTION: //executed actions
      actionId: ActionId;
      action: Action;
      userId: UserId;
    case RENDERED: //available revisions
      location: TileLocation;
      revisionId: RevisionId;
    case HISTORY: //current version branch
      location: TileLocation;
      baseRevisionId: RevisionId;
      tailRevisions: Revisions;
  };
}
type Updates = list of Update

/* interface */
interface Main {
  function sendAction(action: Action): ActionId;
  function setWindow(x: BigInteger, y: BigInteger, width: WindowWidth, height: WindowHeight);
  event onUpdate(updates: Updates);

  //user
  //function getName(userId: UserId): String;
  //function setName(name: String);
  //function getUserInfo(): UserData;
  //function getLastAction(): ActionDataOption;
  //function getNextAction(): ActionDataOption;

  //images
  //function defineImage(x: BigInteger, y: BigInteger, width: ImageWidth, height: ImageHeight): ImageId;
}