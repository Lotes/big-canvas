### BASIC TYPES ###
typedef Size = integer[0...]
typedef Point = tuple of (integer, integer)
typedef BigInteger = string /^-?[0-9]+$/
typedef BigPoint = tuple of (BigInteger, BigInteger)
typedef StrokeOpacity = number[0...1]
typedef StrokeWidth = integer[1...100]
typedef Color = string /^#[0-9A-Fa-f]{6}$/
typedef Selection = nullable string
typedef LayerId = integer[0...5)
typedef Timestamp = integer

### TILES ###
typedef TileLocation = tuple of (BigInteger, BigInteger) #(col, row)

### ACTIONS ###
typedef ActionId = BigInteger
abstract struct ActionStartInfo {}
abstract struct DrawActionStartInfo: ActionStartInfo {
  selection: Selection;
  layer: LayerId;
}
abstract struct StrokeActionStartInfo: DrawActionStartInfo {
  startPoint: BigPoint;
  opacity: StrokeOpacity;
  width: StrokeWidth;
}
struct EraserActionStartInfo: StrokeActionStartInfo {}
struct BrushActionStartInfo: StrokeActionStartInfo {
  color: Color;	
}
struct FillActionStartInfo: DrawActionStartInfo  {
  color: Color;
}
struct Action {
  startInfo: ActionStartInfo;
  nextPoints: list of Point;	
  userId: UserId;
}

### USERS ###
typedef UserId = BigInteger
typedef UserIds = list of UserId
typedef UserWindowWidth = integer[1...4096]
typedef UserWindowHeight = integer[1...4096]
typedef UserWindow = tuple of (BigInteger, BigInteger, UserWindowWidth, UserWindowHeight) #x,y,w,h
typedef UserName = string
typedef UserInfo = tuple of (UserId, UserName, Color)

### SITES ###
enum SiteType {
  READ_ONLY,
  WRITABLE
}
typedef SiteId = string[...40] /^[a-zA-Z0-9]+$/

### COMMENTS ###
typedef AnnotationId = BigInteger #randomly generated
typedef AnnotationIds = list of AnnotationId
struct Annotation {
  id: AnnotationId;
  position: BigPoint;
  authorId: UserId;
  title: string;
  createdAt: Timestamp;
  read: boolean;
  posts: PostIds;
}
typedef PostId = BigInteger #randomly generated
typedef PostIds = list of PostId
struct Post {
  id: PostId;
  authorId: UserId;
  text: string;
  createdAt: Timestamp;
  likingUsers: UserIds;
}

### CLIENTS ###
typedef ClientId = BigInteger

### REMOTE PROCEDURE CALL INTERFACES ###
interface PersistingWorker {
  function persistAction(userId: UserId, window: nullable UserWindow, startInfo: ActionStartInfo, nextPoints: list of BigPoint): ActionId;
}

interface MainWorker {
  #session
  event initialized(clientId: ClientId, userId: UserId);
  function setSite(siteId: SiteId): SiteType;
  
  #window
  function setWindow(window: UserWindow);
  event windowChanged(clientId: ClientId, window: nullable UserWindow);

  #users
  function resolveClientId(clientId: ClientId): UserId;
  function getUserByUserId(userId: UserId): UserInfo;

  #actions
  ###
  function beginAction(startInfo: ActionStartInfo);
  function doActionMove(point: BigPoint);
  function commitAction(): ActionId;
  function cancelAction();
  event onActionBegin(startingClientId: ClientId, startInfo: ActionStartInfo);
  event onActionMoved(movingClientId: ClientId, point: BigPoint);
  event onActionCommitted(committingClientId: ClientId, action: Action);
  event onActionCancelled(cancellingClientId: ClientId);
  function undo(actionId: nullable ActionId); #actionId=null means "user's last action"
  function redo(actionId: nullable ActionId);
  ###

  #comments
  event onAnnotationsChanged(annotationIds: AnnotationIds);
  function getAnnotation(annotationId: AnnotationId): Annotation;
  function getPost(postId: PostId): Post;
  function createAnnotation(position: BigPoint, title: string, text: string): AnnotationId;
  function replyAnnotation(annotationId: AnnotationId, text: string): PostId;
  function openAnnotation(annotationId: AnnotationId);
  function closeAnnotation(annotationId: AnnotationId);
  #function watchAnnotation(annotationId: AnnotationId);
  #function unwatchAnnotation(annotationId: AnnotationId);
  #function likePost(postId: PostId);
  #function unlikePost(postId: PostId);

  #chat
  #function createChatRoom(title: string): ChatRoomId;
  #function addChatUser(roomId: ChatRoomId, userId: UserId);
  #function removeChatUser(roomId: ChatRoomId, userId: UserId);
}